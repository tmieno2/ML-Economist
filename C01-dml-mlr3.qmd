```{r}
#| eval: false 
library(DoubleML)
set.seed(1234)
n_rep <- 1000
n_obs <- 500
n_vars <- 20
alpha <- 0.5

data <- 
  lapply(
    seq_len(n_rep),
    function(x)
    make_plr_CCDDHNR2018(
      alpha = alpha, 
      n_obs = n_obs, 
      dim_x = n_vars,
      return_type = "data.table"
    )
  )

```

```{r}
non_orth_score <- function(y, d, l_hat, m_hat, g_hat, smpls)
{
 u_hat <- y - g_hat
 psi_a <- -1 * d * d
 psi_b <- d * u_hat
 psis <- list(psi_a = psi_a, psi_b = psi_b)
 return(psis)
}
```

```{r}
#| eval: false

lgr::get_logger("mlr3")$set_threshold("warn")
options(repr.plot.width = 5, repr.plot.height = 4)

set.seed(1111)

ml_l <- 
  lrn(
    "regr.ranger", 
    num.trees = 132, 
    max.depth = 5, 
    mtry = 5, 
    min.node.size = 1
  )

ml_m <- 
  lrn(
    "regr.ranger",
    num.trees = 378,
    max.depth = 3,
    mtry = 5,
    min.node.size = 6
  )

ml_g <- ml_l$clone()

run_NonOrth <- function(i) {

  print(i)

  #=== get the data to work on ===#
  df <- data[[i]]

  #===  ===#
  obj_dml_data <- 
    double_ml_data_from_data_frame(
      df, 
      y_col = "y", 
      d_cols = "d"
    )

  #=== set up ===#
  obj_dml_plr_nonorth <- 
    DoubleMLPLR$new(
      obj_dml_data,
      ml_l, 
      ml_m, 
      ml_g,
      n_folds = 2,
      score = non_orth_score,
      apply_cross_fitting = FALSE
    )

  #=== fit ===#
  obj_dml_plr_nonorth$fit()

  results <-
    data.table(
      theta_hat = obj_dml_plr_nonorth$coef,
      se_theta_hat = obj_dml_plr_nonorth$se
    )

    return(results)
}

results_NonOrth <-
  mclapply(
    seq_len(n_rep),
    run_NonOrth,
    mc.cores = detectCores() - 2
  ) %>% 
  rbindlist()

```

```{r}
(
g_nonorth <- 
  results_NonOrth %>% 
  .[, theta_rescaled := (theta_hat - alpha)/se_theta_hat] %>% 
  ggplot(.) +
  geom_histogram(
    aes(
      y = ..density.., 
      x = theta_rescaled, 
      color = "Non-orthogonal ML", 
      fill="Non-orthogonal ML"
    ),
    bins = 30, 
    alpha = 0.3
  ) +
  geom_vline(
    aes(xintercept = 0), 
    col = "black"
  ) +
  suppressWarnings(
    geom_function(
      fun = dnorm, 
      aes(color = "N(0, 1)", fill="N(0, 1)")
    )
  ) +
  scale_color_manual(
    name = '',
    breaks = c("Non-orthogonal ML", "N(0, 1)"),
    values = c("Non-orthogonal ML" = "dark blue", "N(0, 1)" = 'black')
  ) +
  scale_fill_manual(
    name = '',
    breaks = c("Non-orthogonal ML", "N(0, 1)"),
    values = c("Non-orthogonal ML" = "dark blue", "N(0, 1)" = NA)
  ) +
  xlim(c(-6.0, 6.0)) + 
  xlab("") + 
  ylab("") + 
  theme_minimal()
)
``` 


## Double Orthogonalization without cross-fitting

```{r}
run_OrthNoSplit <- function(i) {

  print(i)

  #=== get the data to work on ===#
  df <- data[[i]]

  #===  ===#
  obj_dml_data <- 
    double_ml_data_from_data_frame(
      df, 
      y_col = "y", 
      d_cols = "d"
    )

  #=== set up ===#
  obj_dml_plr_orth_nosplit <- 
    DoubleMLPLR$new(
      obj_dml_data,
      ml_l, ml_m, ml_g,
      n_folds = 1,
      score = 'IV-type',
      apply_cross_fitting = FALSE
    )

  #=== fit ===#
  obj_dml_plr_orth_nosplit$fit()

  results <-
    data.table(
      theta_hat = obj_dml_plr_orth_nosplit$coef,
      se_theta_hat = obj_dml_plr_orth_nosplit$se
    )

  return(results)
}

results_OrthNoSplit <-
  mclapply(
    seq_len(n_rep),
    run_OrthNoSplit,
    mc.cores = detectCores() - 2
  ) %>% 
  rbindlist()

```

```{r}
(
g_nosplit <- 
  results_OrthNoSplit %>% 
  .[, theta_rescaled := (theta_hat - alpha)/se_theta_hat] %>% 
  ggplot(data = .) +
  geom_histogram(
    aes(
      y = ..density.., 
      x = theta_rescaled, 
      color = "Double ML (no sample splitting)", 
      fill = "Double ML (no sample splitting)"
    ),
    bins = 30, 
    alpha = 0.3
  ) +
  geom_vline(aes(xintercept = 0), col = "black") +
  suppressWarnings(geom_function(fun = dnorm, aes(color = "N(0, 1)", fill="N(0, 1)"))) +
  scale_color_manual(
    name = '',
    breaks = c("Double ML (no sample splitting)", "N(0, 1)"),
    values = c("Double ML (no sample splitting)" = "dark orange", "N(0, 1)" = 'black')
  ) +
  scale_fill_manual(
    name = '',
    breaks = c("Double ML (no sample splitting)", "N(0, 1)"),
    values = c("Double ML (no sample splitting)" = "dark orange", "N(0, 1)" = NA)
  ) +
  xlim(c(-6.0, 6.0)) + 
  xlab("") + 
  ylab("") + 
  theme_minimal()
)
```

## Cross-fitting with Double Orthogonalization 

```{r}
run_OrthSplit <- function(i) {

  print(i)

  #=== get the data to work on ===#
  df <- data[[i]]

  #===  ===#
  obj_dml_data <- 
    double_ml_data_from_data_frame(
      df, 
      y_col = "y", 
      d_cols = "d"
    )

  #=== set up ===#
  obj_dml_plr = DoubleMLPLR$new(
    obj_dml_data,
    ml_l, ml_m, ml_g,
    n_folds = 2,
    score = 'IV-type',
    apply_cross_fitting = TRUE # (default)
  )

  #=== fit ===#
  obj_dml_plr$fit()

  results <-
    data.table(
      theta_hat = obj_dml_plr$coef,
      se_theta_hat = obj_dml_plr$se
    )

  return(results)
}

results_OrthSplit <-
  mclapply(
    seq_len(n_rep),
    run_OrthSplit,
    mc.cores = detectCores() - 2
  ) %>% 
  rbindlist()

```

```{r}
(
g_orthsplit <- 
  results_OrthSplit %>% 
  .[, theta_rescaled := (theta_hat - alpha)/se_theta_hat] %>% 
  ggplot(data = .) +
  geom_histogram(
    aes(
      y = ..density.., 
      x = theta_rescaled, 
      color = "Double ML (no sample splitting)", 
      fill="Double ML (no sample splitting)"
    ),
    bins = 30, 
    alpha = 0.3
  ) +
  geom_vline(aes(xintercept = 0), col = "black") +
  suppressWarnings(geom_function(fun = dnorm, aes(color = "N(0, 1)", fill="N(0, 1)"))) +
  scale_color_manual(
    name='',
    breaks=c("Double ML with cross-fitting", "N(0, 1)"),
    values=c("Double ML with cross-fitting" = "dark orange", "N(0, 1)" = 'black')
  ) +
  scale_fill_manual(
    name='',
    breaks=c("Double ML with cross-fitting" ,  "N(0, 1)"),
    values=c("Double ML with cross-fitting" = "dark orange", "N(0, 1)" = NA)
  ) +
  xlim(c(-6.0, 6.0)) + 
  xlab("") + 
  ylab("") + 
  theme_minimal()
)
```


## S-leaner 

Biased.

```{r}
#| eval: false

run_Slearner_rf <- function(i) {

  print(i)

  #=== get the data to work on ===#
  df <- data[[i]]

  rf_trained <-
    ranger(
      y ~ .,
      data = df,
      num.trees = 500,
      mtry = 4
    )

  y_hat_ctrl <- copy(df)[, d := 0] %>% predict(rf_trained, data = .) %>% .$predictions %>% mean()
  y_hat_treated <- copy(df)[, d := 1] %>% predict(rf_trained, data = .) %>% .$predictions %>% mean()  
  te <- y_hat_treated - y_hat_ctrl

  return(te)
}

results_Slearner_rf <-
  mclapply(
    seq_len(n_rep),
    run_Slearner_rf,
    mc.cores = detectCores() - 2
  ) %>% 
  unlist()

mean(results_Slearner_rf)
sd(results_Slearner_rf)
```

## What if $d$ is random?


```{r}

gen_data <- function(
  g_formula = formula(~ I(exp(x1)/(1+exp(x1))) + I(x3/4)), # formula that defines g(x)
  m_formula = formula(~ x1 + I(exp(x3)/(1+exp(x3))/4)), # formula that defines m(x)
  te_formula = formula(~ I(0.5*d)), # formula that defines theta(x) * t
  n_obs = 500, 
  n_vars = 20, 
  mu_x = 0, 
  vcov_x = NULL,
  sigma = 1 # sd of the error term in the y equation
)
{

  if (is.null(vcov_x)) {
    vcov_x <- matrix(rep(0, n_vars^2), nrow = n_vars)
    for (i in seq_len(n_vars)) {
      vcov_x[i, ] <- 0.7^abs(i - seq_len(n_vars)) 
    }
  }

  #=== draw from multivariate normal ===#
  data <- 
    mvrnorm(n_obs, mu = rep(0, n_vars), Sigma = vcov_x) %>% 
    data.table() %>% 
    setnames(names(.), paste0("x", 1:n_vars))  

  #=== generate t ===#
  if (m_formula == "independent") {
    data[, d := rnorm(n_obs)]
  } else {
    data[, d := model.frame(m_formula, data = data) %>% rowSums() + rnorm(n_obs)]
  }

  #=== generate y ===#
  data[, g := model.frame(g_formula, data = data) %>% rowSums()]

  #=== generate treatment effect ===#
  data[, te := model.frame(te_formula, data = data) %>% rowSums()]

  #=== generate y ===#
  data[, y := te + g + rnorm(n_obs, sd = sigma)]

  return(data[])

}


gen_data(n_obs = 500, n_vars = 20)
```

+ without cross-fitting
+ not orthogonalizing T

```{r}
#| eval: false
n_rep <- 1000

data <- 
  lapply(
    seq_len(n_rep),
    function(x)
    gen_data(
      n_obs = 1000,
      n_vars = 10,
      m_formula = "independent"
    )
  )

ml_l <- lrn("regr.ranger", num.trees = 500, max.depth = 5, mtry = 10, min.node.size = 2)
ml_l <- lrn("regr.ranger", num.trees = 500, max.depth = 5, mtry = 5, min.node.size = 2)
ml_l <- lrn("regr.ranger", num.trees = 500, max.depth = 5, mtry = 5, min.node.size = 6)

ml_m <- lrn("regr.ranger", num.trees = 500, max.depth = 5, mtry = 10, min.node.size = 6)
ml_g <- ml_l$clone()

results_NonOrth <-
  mclapply(
    seq_len(n_rep),
    run_NonOrth,
    mc.cores = detectCores() - 2
  ) %>% 
  rbindlist()

mean(results_NonOrth$theta_hat)

(
g_nonorth <- 
  results_NonOrth %>% 
  .[, theta_rescaled := (theta_hat - 0.5)/se_theta_hat] %>% 
  ggplot(.) +
  geom_histogram(
    aes(
      y = ..density.., 
      x = theta_rescaled, 
      color = "Non-orthogonal ML", 
      fill="Non-orthogonal ML"
    ),
    bins = 30, 
    alpha = 0.3
  ) +
  geom_vline(
    aes(xintercept = 0), 
    col = "black"
  ) +
  suppressWarnings(
    geom_function(
      fun = dnorm, 
      aes(color = "N(0, 1)", fill="N(0, 1)")
    )
  ) +
  scale_color_manual(
    name = '',
    breaks = c("Non-orthogonal ML", "N(0, 1)"),
    values = c("Non-orthogonal ML" = "dark blue", "N(0, 1)" = 'black')
  ) +
  scale_fill_manual(
    name = '',
    breaks = c("Non-orthogonal ML", "N(0, 1)"),
    values = c("Non-orthogonal ML" = "dark blue", "N(0, 1)" = NA)
  ) +
  xlab("") + 
  ylab("") + 
  theme_minimal()
)
```