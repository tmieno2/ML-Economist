a = 1
a = 1
r.b
use_virtualenv(here::here("LectureNotes/ml-learning"))
library(reticulate)
use_virtualenv(here::here("LectureNotes/ml-learning"))
use_virtualenv(here::here("ml-learning"))
reticulate::repl_python()
library(reticulate)
use_virtualenv("ml-learning")
library(reticulate)
use_virtualenv("ml-learning")
library(reticulate)
use_virtualenv("ml-learning")
econml <- import("econml")
sl <- import("sklearn")
sl$ensemble$GradientBoostingRegressor()
sl$ensemble$GradientBoostingRegressor()
econml <- import("econml")
sl <- import("sklearn")
econml$DML(
model_y = sl$ensemble$GradientBoostingRegressor(),
model_t = sl$ensemble$GradientBoostingRegressor(),
model_final = sl$linear_model$LassoCV(fit_intercept=False)
)
econml$DML()
reticulate::repl_python()
#=== set up DML estimation ===#
est <-
em_dml$DML(
model_y = gbr(),
model_t = gbr(),
model_final = lassocv(fit_intercept=FALSE)
)
#=== get data ===#
library(wooldridge)
data(mlb1)
mlb1_dt <-
mlb1 %>%
data.table() %>% # turn into data.table
.[, salary := NULL] %>% # remove salary (use lsalary instead)
na.omit() # remove observations with NA in any of the variables
library(tidyverse)
library(data.table)
library(rpart)
library(rattle)
library(wooldridge)
#=== get data ===#
library(wooldridge)
data(mlb1)
mlb1_dt <-
mlb1 %>%
data.table() %>% # turn into data.table
.[, salary := NULL] %>% # remove salary (use lsalary instead)
na.omit() # remove observations with NA in any of the variables
mlb1_dt
mlb1_dt[order(hruns), unique(hruns)]
mlb1_dt[order(hruns), unique(hruns)] %>%
#=== get the rolling mean ===#
frollmean(2)
value_seq <-
#=== order hruns values and find the unique values ===#
mlb1_dt[order(hruns), unique(hruns)] %>%
#=== get the rolling mean ===#
frollmean(2) %>%
.[-1]
value_seq
value_seq
value_seq[50]
copy(mlb1_dt) %>%
#=== find the mean of lsalary by whether hruns is less than the threshold or not ===#
.[, y_hat := mean(lsalary), by = (hruns < value_seq[50])]
mlb1_dt[, y_hat := mean(lsalary), by = (hruns < value_seq[50])]
mlb1_dt
copy(mlb1_dt) %>%
#=== find the mean of lsalary by whether hruns is less than the threshold or not ===#
.[, y_hat := mean(lsalary), by = (hruns < value_seq[50])] %>%
#=== get squared residuals ===#
.[, (lsalary - y_hat)^2] %>%
#=== get RSS ===#
sum()
value_seq[70]
copy(mlb1_dt) %>%
#=== find the mean of lsalary by whether hruns is less than the threshold or not ===#
.[, y_hat := mean(lsalary), by = (hruns < value_seq[70])] %>%
#=== get squared residuals ===#
.[, (lsalary - y_hat)^2] %>%
#=== get RSS ===#
sum()
rss_value <-
lapply(
seq_len(length(value_seq)),
function(x) get_rss(x, "hruns", value_seq, mlb1_dt)
) %>%
rbindlist()
get_rss <- function(i, var_name, value_seq, data)
{
rss <-
copy(data) %>%
setnames(var_name, "var") %>%
.[, y_hat := mean(lsalary), by = (var < value_seq[i])] %>%
.[, (lsalary - y_hat)^2] %>%
sum()
return_data <-
data.table(
rss = rss,
var_name = var_name,
var_value = value_seq[i]
)
return(return_data)
}
value_seq
rss_value <-
lapply(
seq_len(length(value_seq)),
function(x) get_rss(x, "hruns", value_seq, mlb1_dt)
) %>%
rbindlist()
rss_value
rss_value
rss_value[which.min(rss), ]
get_rss_by_var <- function(var_name, data)
{
temp_data <-
copy(data) %>%
setnames(var_name, "temp_var")
#=== define a sequence of values of hruns ===#
value_seq <-
temp_data[order(temp_var), unique(temp_var)] %>%
#=== get the rolling mean ===#
frollmean(2) %>%
.[-1]
setnames(temp_data, "temp_var", var_name)
#=== get RSS ===#
rss_value <-
lapply(
seq_len(length(value_seq)),
function(x) get_rss(x, var_name, value_seq, temp_data)
) %>%
rbindlist() %>%
.[which.min(rss),]
return(rss_value)
}
(
min_rss_by_var <-
lapply(
c("hruns", "years", "rbisyr", "allstar", "runsyr", "hits", "bavg"),
function(x) get_rss_by_var(x, mlb1_dt)
) %>%
rbindlist()
)
train_a_tree <- function(i, data)
{
#=== number of observations ===#
N <- nrow(data)
#=== bootstrapped data ===#
boot_data <- data[sample(1:N, N, replace = TRUE), ]
#=== train a regression tree ===#
rpart <-
rpart(
lsalary ~ hruns + years + rbisyr + allstar + runsyr + hits + bavg,
data = boot_data
)
#=== predict ===#
return_data <-
copy(data) %>%
.[, y_hat := predict(rpart, newdata = data)] %>%
.[, .(id, y_hat)]
return(return_data)
}
(
y_estimates <-
lapply(
1:10,
function(x) train_a_tree(x, mlb1_dt)
) %>%
rbindlist()
)
y_estimates
View(y_estimates)
install.packages("gganimate")
#| include: false
library(tidyverse)
library(data.table)
library(rpart)
library(rattle)
library(wooldridge)
library(gganimate)
#| eval: false
library(tidyverse)
library(data.table)
library(rpart)
library(rattle)
library(wooldridge)
library(gganimate)
#| code-fold: true
#=== get mlb1 data (from wooldridge) ===#
data(mlb1)
#=== build a simple tree ===#
simple_tree <-
rpart(
lsalary ~ hits + runsyr,
data = mlb1,
control = rpart.control(minsplit = 200)
)
fancyRpartPlot(simple_tree)
#| code-fold: true
ggplot(mlb1) +
geom_point(aes(y = hits, x = runsyr, color = lsalary)) +
scale_color_viridis_c() +
geom_hline(yintercept = 262) +
geom_line(
data = data.table(x = 44, y = seq(262, max(mlb1$hits), length = 100)),
aes(y = y, x = x)
) +
annotate(
"text",
x = 44, y = 111,
label = "Region 2",
color = "red"
) +
annotate(
"text",
x = 22, y = 1500,
label = "Region 6",
color = "red"
) +
annotate(
"text",
x = 75, y = 1500,
label = "Region 7",
color = "red"
)
#=== get data ===#
library(wooldridge)
data(mlb1)
mlb1_dt <-
mlb1 %>%
data.table() %>% # turn into data.table
.[, salary := NULL] %>% # remove salary (use lsalary instead)
na.omit() # remove observations with NA in any of the variables
value_seq <-
#=== order hruns values and find the unique values ===#
mlb1_dt[order(hruns), unique(hruns)] %>%
#=== get the rolling mean ===#
frollmean(2) %>%
.[-1]
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id)
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id, range = 30)
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id, range = c(20, 30))
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id, range = c(20, 30))
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id, range = c(20L, 30L))
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
g_thre <-
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_time(id)
animate(g_thre, nframes = 3 * nrow(threshold_data))
g_thre
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_reveal(id)
threshold_data <-
data.table(thre = value_seq) %>%
.[, id := 1:.N]
g_thre <-
ggplot(mlb1_dt) +
geom_point(aes(y = lsalary, x = hruns)) +
geom_vline(data = threshold_data, aes(xintercept = thre)) +
transition_reveal(id)
animate(g_thre, nframes = 3 * nrow(threshold_data))
reticulate::repl_python()
#| eval: false
library(reticulate)
use_virtualenv("ml-learning")
#=== econml.dml ===#
em_dml <- import("econml.dml")
#| include: false
library(data.table)
library(magick)
library(fixest)
library(officer)
library(dplyr)
library(ggplot2)
library(reticulate)
library(DoubleML)
library(MASS)
#| eval: false
library(data.table)
library(magick)
library(fixest)
library(officer)
library(dplyr)
library(ggplot2)
library(reticulate)
library(DoubleML)
library(MASS)
#| eval: false
library(reticulate)
use_virtualenv("ml-learning")
reticulate::repl_python()
#=== sklearn ===#
sl <- import("sklearn")
gbr <- sl$ensemble$GradientBoostingRegressor
lassocv <- sl$linear_model$LassoCV
#| eval: false
#=== sample size ===#
N <- 1000
#=== generate data ===#
synth_data <-
gen_data(
te_formula = formula(~ I(exp(x1)*d)),
n_obs = N *2
)
gen_data <- function(
g_formula = formula(~ I(exp(x1)/(1+exp(x1))) + I(x3/4)), # formula that defines g(x)
m_formula = formula(~ x1 + I(exp(x3)/(1+exp(x3))/4)), # formula that defines m(x)
te_formula = formula(~ I(0.5*d)), # formula that defines theta(x) * t
n_obs = 500,
n_vars = 20,
mu_x = 0,
vcov_x = NULL,
sigma = 1 # sd of the error term in the y equation
)
{
if (is.null(vcov_x)) {
vcov_x <- matrix(rep(0, n_vars^2), nrow = n_vars)
for (i in seq_len(n_vars)) {
vcov_x[i, ] <- 0.7^abs(i - seq_len(n_vars))
}
}
#=== draw from multivariate normal ===#
data <-
mvrnorm(n_obs, mu = rep(0, n_vars), Sigma = vcov_x) %>%
data.table() %>%
setnames(names(.), paste0("x", 1:n_vars))
#=== generate d ===#
if (m_formula == "independent") {
data[, d := rnorm(n_obs)]
} else {
data[, d := model.frame(m_formula, data = data) %>% rowSums() + rnorm(n_obs)]
}
#=== generate y ===#
data[, g := model.frame(g_formula, data = data) %>% rowSums()]
#=== generate treatment effect ===#
data[, te := model.frame(te_formula, data = data) %>% rowSums()]
#=== generate y ===#
data[, y := te + g + rnorm(n_obs, sd = sigma)]
return(data[])
}
#| eval: false
#=== sample size ===#
N <- 1000
#=== generate data ===#
synth_data <-
gen_data(
te_formula = formula(~ I(exp(x1)*d)),
n_obs = N *2
)
X <- select(synth_data, starts_with("x"))
X <- dplur::select(synth_data, starts_with("x"))
X <- dplyr::select(synth_data, starts_with("x"))
X <- dplyr::select(synth_data, starts_with("x"))
y <- dplyr::select(synth_data, y)
y
X
X <- dplyr::select(synth_data, starts_with("x")) %>% as.matrix()
X
reticulate::repl_python()
#| eval: false
#=== sample size ===#
N <- 1000
#=== generate data ===#
synth_data <-
gen_data(
te_formula = formula(~ I(exp(x1)*d)),
n_obs = N *2
)
X <- dplyr::select(synth_data, starts_with("x")) %>% as.matrix()
y <- synth_data[, y]
d <- synth_data[, d]
reticulate::repl_python()
#| eval: false
ggplot(test_data) +
geom_point(aes(y = py$te_test, x = X_test[1, ])) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
#| eval: false
ggplot() +
geom_point(aes(y = py$te_test, x = X_test[1, ])) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
#| eval: false
ggplot() +
geom_point(aes(y = py$te_test, x = py$X_test[1, ])) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
py$X_test[, 1]
#| eval: false
ggplot() +
geom_point(aes(y = py$te_test, x = py$X_test[, 1])) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
#| eval: false
plot_data <-
data.table(
x1 = py$X_test[, 1],
te = py$te_test
)
ggplot(plot_data) +
geom_point(aes(y = te, x = x1)) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
#| fig-cap: Estimated and true marginal treatment effects
#| label: fig-est-theta-hat
plot_data <-
data.table(
x1 = py$X_test[, 1],
te = py$te_test
)
g_het_te <-
ggplot(plot_data) +
geom_point(aes(y = te, x = x1)) +
geom_line(aes(y = exp(x1), x = x1), color = "blue") +
theme_bw()
g_het_te <- readRDS("g_hte_te.rds")
g_het_te
library(reticulate)
repl_python()
